/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    umi-amplicon modules configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Configuration for umi-amplicon modules
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

process {
    publishDir = [
        [
            path: { "./results/" },
            mode: params.publish_dir_mode,
            pattern: '*.{html,txt,log}'
        ]
    ]

    withName: 'UMI_QC_METRICS_POSTUMIEXTRACT' {
        publishDir = [
            [
                path: { "${params.outdir}/umi_qc_metrics" },
                mode: params.publish_dir_mode,
                pattern: '*.{txt,json}',
                saveAs: { filename -> "before_dedup/${filename}" }
            ]
        ]
    }

    withName: 'UMI_QC_HTML_REPORT' {
        publishDir = [
            [
                path: { "${params.outdir}/umi_qc_metrics" },
                mode: params.publish_dir_mode,
                pattern: '*.html',
                saveAs: { filename -> "html_report/${filename}" }
            ]
        ]
    }

    withName: 'UMITOOLS_EXTRACT' {
        ext.args = {
            def args = ['--bc-pattern', params.umi_pattern]
            def threshold = params.umi_quality_filter_threshold ?: 0
            if (threshold > 0) {
                args.add("--quality-filter-threshold ${threshold}")
            }
            args.add('--quality-encoding phred33')
            args.join(' ')
        }
        publishDir = [
            [
                path: { "${params.outdir}/umitools/extract" },
                mode: params.publish_dir_mode,
                pattern: '*.{fastq.gz,log}'
            ]
        ]
    }

    withName: 'UMITOOLS_DEDUP' {
        ext.args = [
            '--method', params.umi_method ?: 'directional',
            '--edit-distance-threshold', params.max_edit_distance ?: 1,
            '--output-stats', 'deduplicated'
        ].join(' ')
        publishDir = [
            [
                path: { "${params.outdir}/umitools/dedup" },
                mode: params.publish_dir_mode,
                pattern: '*.{bam,bam.bai,tsv,log}'
            ]
        ]
    }

    withName: 'UMI_QC_METRICS_POSTDEDUP' {
        publishDir = [
            [
                path: { "${params.outdir}/umi_qc_metrics" },
                mode: params.publish_dir_mode,
                pattern: '*.{html,txt,json,png}',
                saveAs: { filename -> "after_dedup/${filename}" }
            ]
        ]
    }

    // FastQC on raw reads
    withName: 'UMI_ANALYSIS_SUBWORKFLOW:FASTQC_RAW' {
        publishDir = [
            [
                path: { "${params.outdir}/fastqc" },
                mode: params.publish_dir_mode,
                pattern: '*.{html,zip}',
                saveAs: { filename -> "raw/${filename}" }
            ]
        ]
    }

    // FastQC after first FASTP (QC round)
    withName: 'UMI_ANALYSIS_SUBWORKFLOW:FASTQC_FASTP_QC' {
        publishDir = [
            [
                path: { "${params.outdir}/fastqc" },
                mode: params.publish_dir_mode,
                pattern: '*.{html,zip}',
                saveAs: { filename -> "after_fastp_qc/${filename}" }
            ]
        ]
    }

    // FastQC after second FASTP (trim round)
    withName: 'UMI_ANALYSIS_SUBWORKFLOW:FASTQC_FASTP_TRIM' {
        publishDir = [
            [
                path: { "${params.outdir}/fastqc" },
                mode: params.publish_dir_mode,
                pattern: '*.{html,zip}',
                saveAs: { filename -> "after_fastp_trim/${filename}" }
            ]
        ]
    }

    // FASTP_QC: Initial QC and filtering (before UMI extraction)
    // CRITICAL: NO --cut_front to preserve UMI sequences at 5' end
    // CRITICAL: NO MERGING - keep reads separate for UMI extraction
    // This completely overrides base FASTP config to prevent merging
    withName: 'UMI_ANALYSIS_SUBWORKFLOW:FASTP_QC' {
        ext.args = {[
            // Quality filtering and 3' trimming ONLY
            // NO merging flags - completely override base config
            '--cut_tail',                       // Trim 3' end is safe
            '--trim_poly_x',                    // Trim poly-X tails is safe
            '--qualified_quality_phred', '15',  // Quality filtering is safe
            '--unqualified_percent_limit', '40',
            '--length_required', '50',
            '--detect_adapter_for_pe',          // Adapter detection
            '--length_limit', '0'               // No max length limit
        ].join(' ').trim() }
        // Explicitly disable merging (override base config)
        ext.save_merged = false
        publishDir = [
            [
                path: { "${params.outdir}/fastp" },
                mode: params.publish_dir_mode,
                pattern: '*.{fastq.gz,json,html,log}',
                saveAs: { filename -> "qc_no5trim/${filename}" }
            ]
        ]
    }

    // FASTP_TRIM: Quality trimming and filtering (after UMI extraction)
    // Now that UMIs are safely in read headers, we can trim and filter aggressively
    withName: 'UMI_ANALYSIS_SUBWORKFLOW:FASTP_TRIM' {
        ext.args = [
            '--cut_front',                      // Trim bases from 5' end based on quality
            '--cut_tail',                       // Trim bases from 3' end based on quality
            '--trim_poly_x',                    // Trim poly-X tails
            '--qualified_quality_phred', '15',  // Quality value for a qualified base
            '--unqualified_percent_limit', '40',// Max % of unqualified bases allowed
            '--length_required', '50'           // Min length after trimming
        ].join(' ')
        publishDir = [
            [
                path: { "${params.outdir}/fastp" },
                mode: params.publish_dir_mode,
                pattern: '*.{fastq.gz,json,html,log}',
                saveAs: { filename -> "qc_5trim/${filename}" }
            ]
        ]
    }

    withName: 'BWA_MEM' {
        publishDir = [
            [
                path: { "${params.outdir}/alignment/bam" },
                mode: params.publish_dir_mode,
                pattern: '*.bam'
            ]
        ]
    }

    withName: 'SAMTOOLS_INDEX' {
        publishDir = [
            [
                path: { "${params.outdir}/alignment/bam" },
                mode: params.publish_dir_mode,
                pattern: '*.bai'
            ]
        ]
    }

    withName: 'SAMTOOLS_STATS|SAMTOOLS_FLAGSTAT|SAMTOOLS_IDXSTATS' {
        publishDir = [
            [
                path: { "${params.outdir}/alignment/samtools_stats" },
                mode: params.publish_dir_mode,
                pattern: '*.{stats,flagstat,idxstats}'
            ]
        ]
    }

    withName: 'PICARD_COLLECTALIGNMENTSUMMARYMETRICS|PICARD_COLLECTINSERTSIZEMETRICS' {
        publishDir = [
            [
                path: { "${params.outdir}/alignment/picard" },
                mode: params.publish_dir_mode,
                pattern: '*.txt'
            ]
        ]
    }

    withName: 'MOSDEPTH' {
        publishDir = [
            [
                path: { "${params.outdir}/alignment/mosdepth" },
                mode: params.publish_dir_mode,
                pattern: '*.{txt,gz}'
            ]
        ]
    }

    withName: 'MULTIQC' {
        ext.args = [
            '--force',
            '--fullnames',
            '--title', 'UMI Amplicon Analysis Report'
        ].join(' ')
        publishDir = [
            [
                path: { "${params.outdir}/multiqc" },
                mode: params.publish_dir_mode,
                pattern: '*{html,_data}'
            ]
        ]
    }
}
