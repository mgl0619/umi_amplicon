/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    umi-amplicon platform-aware configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Automatically detects platform architecture and configures appropriate Docker settings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

// Detect platform architecture
def platform = {
    def arch = System.getProperty('os.arch').toLowerCase()
    def os = System.getProperty('os.name').toLowerCase()
    
    if (os.contains('mac')) {
        if (arch.contains('aarch64') || arch.contains('arm64')) {
            return 'arm64'
        } else {
            return 'amd64'
        }
    } else if (os.contains('linux')) {
        if (arch.contains('aarch64') || arch.contains('arm64')) {
            return 'arm64'
        } else {
            return 'amd64'
        }
    } else {
        return 'amd64' // Default fallback
    }
}()
println "Detected platform: ${platform}"

// Configure Docker to use the appropriate platform
// This forces Docker to use the correct architecture for the images
docker {
    enabled = true
    user = false
    runOptions = platform == 'arm64' ? '--platform linux/arm64' : '--platform linux/amd64'
}

// Print platform information
println "Platform configuration:"
println "  Architecture: ${platform}"
println "  Docker platform: ${platform == 'arm64' ? 'linux/arm64' : 'linux/amd64'}"
println "  Container engine: docker"
println "  Docker run options: ${docker.runOptions}"

// Platform-specific process configurations
if (platform == 'arm64') {
    println "  Using ARM64-compatible configuration"
    
    // For ARM64, we'll use the same images but with proper platform specification
    // Docker will handle the emulation automatically
    process {
        withLabel:fastqc {
            container = 'quay.io/biocontainers/fastqc:0.12.1--hdfd78af_0'
        }
        withLabel:umi_tools {
            container = 'quay.io/biocontainers/umi_tools:1.1.6--py311haab0aaa_0'
        }
        withLabel:bwa {
            container = 'quay.io/biocontainers/bwa:0.7.17--h7132678_9'
        }
        withLabel:multiqc {
            container = 'quay.io/biocontainers/multiqc:1.19--pyhdfd78af_0'
        }
        withLabel:subread {
            container = 'quay.io/biocontainers/subread:2.0.6--h5bf99c6_0'
        }
        withLabel:fgbio {
            container = 'quay.io/biocontainers/fgbio:2.0.2--hdfd78af_0'
        }
    }
} else {
    println "  Using AMD64-compatible configuration"
    
    // For AMD64, use standard images
    process {
        withLabel:fastqc {
            container = 'quay.io/biocontainers/fastqc:0.12.1--hdfd78af_0'
        }
        withLabel:umi_tools {
            container = 'quay.io/biocontainers/umi_tools:1.1.6--py311haab0aaa_0'
        }
        withLabel:bwa {
            container = 'quay.io/biocontainers/bwa:0.7.17--h7132678_9'
        }
        withLabel:multiqc {
            container = 'quay.io/biocontainers/multiqc:1.19--pyhdfd78af_0'
        }
        withLabel:subread {
            container = 'quay.io/biocontainers/subread:2.0.6--h5bf99c6_0'
        }
        withLabel:fgbio {
            container = 'quay.io/biocontainers/fgbio:2.0.2--hdfd78af_0'
        }
    }
}
