// Global nextflow configuration file for 'umi-amplicon'
// This file configures the core Nextflow options which can be overridden in a pipeline-specific configuration file

// Manifest
manifest {
    name            = 'umi-amplicon'
    author          = 'Gang Michael Liu assisted with chatgpt'
    description     = 'UMI-tagged amplicon sequencing analysis pipeline'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '1.0.0'
}

// Profiles
profiles {
    docker {
        docker.enabled = true
        docker.runOptions = '-u $(id -u):$(id -g)'
        docker.fixOwnership = true
    }
    conda {
        conda.enabled = true
        conda.cacheDir = "./conda_cache"
        conda.createTimeout = '30m'
    }
}

// Default UMI parameters
params {
    // Help and version
    help = false
    version = false
    
    // Input/Output
    input = null
    outdir = './results'
    fasta = null
    bwa_index = null
    gtf = null
    
    // UMI parameters
    umi_length = 12
    umi_pattern = 'NNNNNNNNNNNN'
    umi_method = 'directional'
    umi_quality_filter_threshold = 15
    umi_collision_rate_threshold = 0.1
    umi_diversity_threshold = 1000
    max_edit_distance = 1
    min_base_quality = 20
    
    // Read processing parameters
    merge_pairs = false  // Set to true to merge paired-end reads after trimming (not recommended for UMI dedup)
    
    // Deduplication/Consensus workflow parameters
    skip_fgbio = false  // Set to true to skip fgbio consensus (run only umi_tools)
    
    // fgbio consensus parameters
    fgbio_group_strategy = 'adjacency'  // or 'identity', 'edit', 'paired'
    fgbio_min_reads = 1  // Minimum reads to form consensus
    fgbio_min_baseq = 20  // Minimum base quality for consensus
    
    // Skip parameters
    skip_mosdepth = false
    
    // Output parameters
    publish_dir_mode = 'copy'
    
    // Resource limits
    max_cpus = 8
    max_memory = '24.GB'
    max_time = '240.h'
}

// Export this variable to prevent local Python libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
}

// ============================================================================
// Process Configuration
// ============================================================================
process {
    // Default resources
    cpus   = { check_max( 1    * task.attempt, 'cpus'    ) }
    memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
    time   = { check_max( 4.h  * task.attempt, 'time'    ) }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'
    shell         = ['/bin/bash', '-euo', 'pipefail']

    // Resource labels
    withLabel:process_single {
        cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
        memory = { check_max( 6.GB * task.attempt, 'memory' ) }
        time   = { check_max( 4.h  * task.attempt, 'time'   ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time = { check_max( 20.h  * task.attempt, 'time'   ) }
    }

    // UMI Tools
    withName: 'UMITOOLS_EXTRACT' {
        ext.args = {
            def args = ['--bc-pattern', params.umi_pattern]
            def threshold = params.umi_quality_filter_threshold ?: 0
            if (threshold > 0) {
                args.add("--quality-filter-threshold ${threshold}")
            }
            args.add('--quality-encoding phred33')
            args.join(' ')
        }
        publishDir = [
            [
                path: { "${params.outdir}/umitools/extract" },
                mode: params.publish_dir_mode,
                pattern: '*.{fastq.gz,log}'
            ]
        ]
    }

    withName: 'UMITOOLS_DEDUP' {
        ext.prefix = { "${meta.id}.dedup" }
        ext.args = [
            '--method', params.umi_method ?: 'directional',
            '--edit-distance-threshold', params.max_edit_distance ?: 1,
            '--output-stats', 'deduplicated'
        ].join(' ')
        publishDir = [
            [
                path: { "${params.outdir}/umitools/dedup" },
                mode: params.publish_dir_mode,
                pattern: '*.{bam,bam.bai,tsv,log}'
            ]
        ]
    }

    // UMI QC
    withName: 'UMI_QC_METRICS_POSTUMIEXTRACT' {
        publishDir = [
            [
                path: { "${params.outdir}/umi_qc_metrics" },
                mode: params.publish_dir_mode,
                pattern: '*.{txt,json}',
                saveAs: { filename -> "before_dedup/${filename}" }
            ]
        ]
    }

    withName: 'UMI_QC_METRICS_POSTDEDUP' {
        publishDir = [
            [
                path: { "${params.outdir}/umi_qc_metrics" },
                mode: params.publish_dir_mode,
                pattern: '*.{html,txt,json,png}',
                saveAs: { filename -> "after_dedup/${filename}" }
            ]
        ]
    }

    withName: 'UMI_QC_HTML_REPORT' {
        publishDir = [
            [
                path: { "${params.outdir}/umi_qc_metrics" },
                mode: params.publish_dir_mode,
                pattern: '*.html',
                saveAs: { filename -> "html_report/${filename}" }
            ]
        ]
    }

    withName: 'SAMTOOLS_IDXSTATS_DEDUP' {
        publishDir = [
            [
                path: { "${params.outdir}/counts/deduplicated" },
                mode: params.publish_dir_mode,
                pattern: '*.idxstats'
            ]
        ]
    }

    // FastQC (all stages)
    withName: 'UMI_ANALYSIS_SUBWORKFLOW:FASTQC_RAW' {
        publishDir = [[ path: { "${params.outdir}/fastqc/raw" }, mode: params.publish_dir_mode, pattern: '*.{html,zip}' ]]
    }
    withName: 'UMI_ANALYSIS_SUBWORKFLOW:FASTQC_FASTP_QC' {
        publishDir = [[ path: { "${params.outdir}/fastqc/after_fastp_qc" }, mode: params.publish_dir_mode, pattern: '*.{html,zip}' ]]
    }
    withName: 'UMI_ANALYSIS_SUBWORKFLOW:FASTQC_FASTP_TRIM' {
        publishDir = [[ path: { "${params.outdir}/fastqc/after_fastp_trim" }, mode: params.publish_dir_mode, pattern: '*.{html,zip}' ]]
    }

    // FASTP (QC without 5' trim, then full trim after UMI extraction)
    withName: 'UMI_ANALYSIS_SUBWORKFLOW:FASTP_QC' {
        ext.args = '--cut_tail --trim_poly_x --qualified_quality_phred 15 --unqualified_percent_limit 40 --length_required 50 --detect_adapter_for_pe --length_limit 0'
        ext.save_merged = false
        publishDir = [[ path: { "${params.outdir}/fastp/qc_no5trim" }, mode: params.publish_dir_mode, pattern: '*.{fastq.gz,json,html,log}' ]]
    }
    withName: 'UMI_ANALYSIS_SUBWORKFLOW:FASTP_TRIM' {
        ext.args = '--cut_front --cut_tail --trim_poly_x --qualified_quality_phred 15 --unqualified_percent_limit 40 --length_required 50'
        publishDir = [[ path: { "${params.outdir}/fastp/qc_5trim" }, mode: params.publish_dir_mode, pattern: '*.{fastq.gz,json,html,log}' ]]
    }

    // Alignment and QC
    withName: 'BWA_MEM' {
        publishDir = [[ path: { "${params.outdir}/alignment/bam" }, mode: params.publish_dir_mode, pattern: '*.bam' ]]
    }
    withName: 'SAMTOOLS_INDEX' {
        publishDir = [[ path: { "${params.outdir}/alignment/bam" }, mode: params.publish_dir_mode, pattern: '*.bai' ]]
    }
    withName: 'SAMTOOLS_STATS|SAMTOOLS_FLAGSTAT|SAMTOOLS_IDXSTATS' {
        publishDir = [[ path: { "${params.outdir}/alignment/samtools_stats" }, mode: params.publish_dir_mode, pattern: '*.{stats,flagstat,idxstats}' ]]
    }
    withName: 'PICARD_COLLECTALIGNMENTSUMMARYMETRICS|PICARD_COLLECTINSERTSIZEMETRICS' {
        publishDir = [[ path: { "${params.outdir}/alignment/picard" }, mode: params.publish_dir_mode, pattern: '*.txt' ]]
    }
    withName: 'MOSDEPTH' {
        publishDir = [[ path: { "${params.outdir}/alignment/mosdepth" }, mode: params.publish_dir_mode, pattern: '*.{txt,gz}' ]]
    }

    // Gene-level counts (featureCounts on deduplicated BAM)
    withName: 'SUBREAD_FEATURECOUNTS' {
        publishDir = [[ path: { "${params.outdir}/counts/gene_level" }, mode: params.publish_dir_mode, pattern: '*.{txt,summary}' ]]
    }

    withName: 'MULTIQC' {
        ext.args = '--force --fullnames --title "UMI Amplicon Analysis Report"'
        publishDir = [[ path: { "${params.outdir}/multiqc" }, mode: params.publish_dir_mode, pattern: '*{html,_data}' ]]
    }
}

// ============================================================================
// Functions
// ============================================================================
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value."
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value."
            return obj
        }
    } else if (type == 'cpus') {
        try {
            if (obj.compareTo(params.max_cpus as int) == 1)
                return params.max_cpus as int
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value."
            return obj
        }
    }
}

// ============================================================================
// Reporting
// ============================================================================
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline.html"
    overwrite = true
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report.html"
    overwrite = true
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace.txt"
    overwrite = true
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag.svg"
    overwrite = true
}
